{"version":3,"sources":["../src/index.tsx","../src/components/containers/provider/index.tsx","../src/contexts/auth/index.tsx","../src/contexts/data/index.tsx","../src/hooks/data/useList.tsx","../src/definitions/helpers/queryKeys/index.tsx","../src/hooks/data/useOne.ts","../src/hooks/data/useMany.ts","../src/hooks/data/useUpdate.ts","../src/hooks/data/useCreate.ts","../src/hooks/data/useDelete.ts","../src/hooks/data/useCreateMany.ts","../src/hooks/data/useUpdateMany.ts","../src/hooks/data/useDeleteMany.ts","../src/hooks/data/useApiUrl.ts","../src/hooks/data/useCustom.ts","../src/hooks/data/useDataProvider.ts","../src/hooks/invalidate/index.ts","../src/hooks/smelt/useMutationMode.ts","../src/contexts/smelt/index.tsx","../src/hooks/auth/usePermissions/index.ts","../src/hooks/auth/useGetIdentity/index.ts","../src/hooks/auth/useLogout/index.ts","../src/hooks/auth/useLogin/index.ts","../src/hooks/auth/useAuthenticated/index.ts","../src/hooks/auth/useIsAuthenticated/index.ts","../src/hooks/auth/useIsExistAuthentication.ts"],"sourcesContent":["\r\nexport * from \"./components\";\r\n\r\n\r\nexport  *  from \"./hooks\";\r\n\r\nexport {\r\n  IAuthContext as AuthProvider,\r\n    Pagination,\r\n    IDataContextProvider as DataProvider,\r\n    MutationMode,\r\n    HttpError,\r\n    CrudFilter,\r\n    CrudFilters,\r\n    LogicalFilter,\r\n    ConditionalFilter,\r\n    CrudOperators,\r\n    CrudSorting,\r\n    CrudSort,\r\n    GetListResponse,\r\n    GetOneResponse,\r\n    GetManyResponse,\r\n    CreateResponse,\r\n    CreateManyResponse,\r\n    UpdateManyResponse,\r\n    UpdateResponse,\r\n    DeleteOneResponse,\r\n    DeleteManyResponse,\r\n    CustomResponse,\r\n    BaseRecord,\r\n    BaseKey,\r\n    MetaDataQuery,\r\n    IQueryKeys,\r\n} from \"./interfaces\";\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {\r\n    QueryClientProvider,\r\n    QueryClient,\r\n    QueryCache,\r\n    MutationCache,\r\n    DefaultOptions,\r\n} from \"react-query\";\r\nimport { ReactQueryDevtools } from \"react-query/devtools\";\r\n\r\nimport { AuthContextProvider } from \"../../../contexts/auth\";\r\nimport { DataContextProvider } from \"../../../contexts/data\";\r\n\r\nimport {\r\n    IDataMultipleContextProvider,\r\n    IDataContextProvider,\r\n    IAuthContext\r\n} from \"../../../interfaces\";\r\n\r\ninterface QueryClientConfig {\r\n    queryCache?: QueryCache;\r\n    mutationCache?: MutationCache;\r\n    defaultOptions?: DefaultOptions;\r\n}\r\nexport interface ProviderProps {\r\n    authProvider?: IAuthContext;\r\n    dataProvider: IDataContextProvider | IDataMultipleContextProvider;\r\n\r\n    reactQueryClientConfig?: QueryClientConfig;\r\n    reactQueryDevtoolConfig?: any;\r\n}\r\n\r\nexport const Provider: React.FC<ProviderProps> = ({\r\n    authProvider,\r\n    children,\r\n    reactQueryClientConfig,\r\n    dataProvider,\r\n}) => {\r\n    const queryClient = new QueryClient({\r\n        ...reactQueryClientConfig,\r\n        defaultOptions: {\r\n            ...reactQueryClientConfig?.defaultOptions,\r\n            queries: {\r\n                refetchOnWindowFocus: false,\r\n                keepPreviousData: true,\r\n                ...reactQueryClientConfig?.defaultOptions?.queries,\r\n            },\r\n        },\r\n    });\r\n\r\n    return (\r\n        <QueryClientProvider client={queryClient}>\r\n            <AuthContextProvider {...authProvider} isProvided={!!authProvider}>\r\n            <DataContextProvider {...dataProvider}>\r\n                <>{children}</>\r\n            </DataContextProvider>\r\n            </AuthContextProvider>\r\n            <ReactQueryDevtools\r\n                initialIsOpen={false}\r\n                position=\"bottom-right\"\r\n                {...reactQueryClientConfig}\r\n            />\r\n        </QueryClientProvider>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useQueryClient } from \"react-query\";\r\n\r\n\r\nimport { IAuthContext } from \"../../interfaces\";\r\n\r\nconst defaultProvider: IAuthContext = {\r\n    login: () => Promise.resolve(),\r\n    logout: () => Promise.resolve(),\r\n    checkAuth: () => Promise.resolve(),\r\n    checkError: () => Promise.resolve(),\r\n    getPermissions: () => Promise.resolve(),\r\n    getUserIdentity: () => Promise.resolve(),\r\n};\r\nexport const AuthContext = React.createContext<IAuthContext>(defaultProvider);\r\n\r\nexport const AuthContextProvider: React.FC<Partial<IAuthContext>> = ({\r\n    login = defaultProvider.login,\r\n    logout = defaultProvider.logout,\r\n    checkAuth = defaultProvider.checkAuth,\r\n    checkError = defaultProvider.checkError,\r\n    getPermissions = defaultProvider.getPermissions,\r\n    getUserIdentity = defaultProvider.getUserIdentity,\r\n    isProvided,\r\n    children,\r\n}) => {\r\n    const [isAuthenticated, setAuthenticated] = useState(false);\r\n    const queryClient = useQueryClient();\r\n\r\n    useEffect(() => {\r\n        queryClient.invalidateQueries([\"useAuthenticated\"]);\r\n    }, [isAuthenticated]);\r\n\r\n    const loginFunc = async (params: any) => {\r\n        try {\r\n            const result = await login(params);\r\n            setAuthenticated(true);\r\n            return Promise.resolve(result);\r\n        } catch (error) {\r\n            setAuthenticated(false);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const logoutFunc = async (params: any) => {\r\n        try {\r\n            const redirectPath = await logout(params);\r\n            setAuthenticated(false);\r\n\r\n            return Promise.resolve(redirectPath);\r\n        } catch (error) {\r\n            setAuthenticated(true);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const checkAuthFunc = async (params: any) => {\r\n        try {\r\n            await checkAuth(params);\r\n            setAuthenticated(true);\r\n        } catch (error) {\r\n            if ((error as { redirectPath?: string })?.redirectPath) {\r\n               console.log( error.redirectPath);\r\n            }\r\n            setAuthenticated(false);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                login: loginFunc,\r\n                logout: logoutFunc,\r\n                checkAuth: checkAuthFunc,\r\n                checkError,\r\n                getPermissions,\r\n                getUserIdentity,\r\n                isAuthenticated,\r\n                isProvided,\r\n            }}\r\n        >\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};","import React from \"react\";\r\n\r\nimport {\r\n    IDataContextProvider,\r\n    IDataMultipleContextProvider,\r\n} from \"../../interfaces\";\r\n\r\nexport const defaultDataProvider = () => {\r\n    return {\r\n        default: {\r\n            create: () => Promise.resolve({ data: { id: 1 } }),\r\n            createMany: () => Promise.resolve({ data: [] }),\r\n            deleteOne: () => Promise.resolve({ data: { id: 1 } }),\r\n            deleteMany: () => Promise.resolve({ data: [] }),\r\n            getList: () => Promise.resolve({ data: [], total: 0 }),\r\n            getMany: () => Promise.resolve({ data: [] }),\r\n            getOne: () => Promise.resolve({ data: { id: 1 } }),\r\n            update: () => Promise.resolve({ data: { id: 1 } }),\r\n            updateMany: () => Promise.resolve({ data: [] }),\r\n            custom: () => Promise.resolve({ data: {} }),\r\n            getApiUrl: () => \"\",\r\n        },\r\n    };\r\n};\r\n\r\nexport const DataContext = React.createContext<IDataMultipleContextProvider>(\r\n    defaultDataProvider() as IDataMultipleContextProvider,\r\n);\r\n\r\nexport const DataContextProvider: React.FC<\r\n    IDataMultipleContextProvider | IDataContextProvider\r\n> = ({ children, ...rest }) => {\r\n    let dataProviders;\r\n    if (\r\n        !rest.hasOwnProperty(\"updateMany\") ||\r\n        !rest.hasOwnProperty(\"createMany\")\r\n    ) {\r\n        dataProviders = rest as IDataMultipleContextProvider;\r\n    } else {\r\n        dataProviders = {\r\n            default: rest,\r\n        } as IDataMultipleContextProvider;\r\n    }\r\n    return (\r\n        <DataContext.Provider value={dataProviders}>\r\n            {children}\r\n        </DataContext.Provider>\r\n    );\r\n};","import { QueryObserverResult, useQuery, UseQueryOptions } from \"react-query\";\r\nimport {\r\n    GetListResponse,\r\n    CrudFilters,\r\n    Pagination,\r\n    BaseRecord,\r\n    HttpError,\r\n    CrudSorting,\r\n    MetaDataQuery,\r\n} from \"../../interfaces\";\r\nimport { useDataProvider } from \"../../hooks/data\";\r\nimport { queryKeys } from \"../../definitions/helpers/queryKeys\";\r\n\r\nexport interface UseListConfig {\r\n    pagination?: Pagination;\r\n    sort?: CrudSorting;\r\n    filters?: CrudFilters;\r\n}\r\n\r\nexport type UseListProps<TData, TError> = {\r\n    resource: string;\r\n    config?: UseListConfig;\r\n    queryOptions?: UseQueryOptions<GetListResponse<TData>, TError>;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n};\r\n\r\nexport const useList = <\r\n    TData extends BaseRecord,\r\n    TError extends HttpError = HttpError\r\n>({\r\n    resource,\r\n    config,\r\n    queryOptions,\r\n    metaData,\r\n    dataProviderName,\r\n}: UseListProps<TData, TError>): QueryObserverResult<\r\n    GetListResponse<TData>,\r\n    TError\r\n> => {\r\n    const dataProvider = useDataProvider();\r\n    const queryKey = queryKeys(resource, dataProviderName, metaData);\r\n    const { getList } = dataProvider(dataProviderName);\r\n\r\n    const queryResponse = useQuery<GetListResponse<TData>, TError>(\r\n        queryKey.list(config),\r\n        () => getList<TData>({ resource, ...config, metaData }),\r\n        {\r\n            ...queryOptions,\r\n            onSuccess: (data) => {\r\n                queryOptions?.onSuccess?.(data);\r\n            },\r\n            onError: (err: TError) => {\r\n                queryOptions?.onError?.(err);\r\n            },\r\n        }\r\n    );\r\n\r\n    return queryResponse;\r\n};\r\n","import { IQueryKeys } from \"../../../interfaces\";\r\nimport { QueryKey } from \"react-query\";\r\n\r\nimport { MetaDataQuery } from \"../../../interfaces\";\r\n\r\nexport const queryKeys = (\r\n    resource: string,\r\n    dataProviderName?: string,\r\n    metaData?: MetaDataQuery | undefined,\r\n): IQueryKeys => {\r\n    const providerName = dataProviderName || \"default\";\r\n    const keys: IQueryKeys = {\r\n        all: [providerName],\r\n        resourceAll: [providerName, resource],\r\n        list: (config) => [\r\n            ...keys.resourceAll,\r\n            \"list\",\r\n            { ...config, ...metaData } as QueryKey,\r\n        ],\r\n        many: (ids) =>\r\n            [\r\n                ...keys.resourceAll,\r\n                \"getMany\",\r\n                (ids && ids.map(String)) as QueryKey,\r\n                { ...metaData } as QueryKey,\r\n            ].filter((item) => item !== undefined),\r\n        detail: (id) => [\r\n            ...keys.resourceAll,\r\n            \"detail\",\r\n            id?.toString(),\r\n            { ...metaData } as QueryKey,\r\n        ],\r\n    };\r\n    return keys;\r\n};","import { QueryObserverResult, useQuery, UseQueryOptions } from \"react-query\";\r\n\r\nimport {\r\n  GetOneResponse,\r\n  HttpError,\r\n  BaseRecord,\r\n  BaseKey,\r\n  MetaDataQuery,\r\n} from \"../../interfaces\";\r\nimport { useDataProvider } from \"../data\";\r\nimport { queryKeys } from \"../../definitions/helpers/queryKeys\";\r\n\r\nexport type UseOneProps<TData, TError> = {\r\n  resource: string;\r\n  id: BaseKey;\r\n  queryOptions?: UseQueryOptions<GetOneResponse<TData>, TError>;\r\n\r\n  metaData?: MetaDataQuery;\r\n  dataProviderName?: string;\r\n};\r\n\r\nexport const useOne = <\r\n  TData extends BaseRecord = BaseRecord,\r\n  TError extends HttpError = HttpError\r\n>({\r\n  resource,\r\n  id,\r\n  queryOptions,\r\n  metaData,\r\n  dataProviderName,\r\n}: UseOneProps<TData, TError>): QueryObserverResult<GetOneResponse<TData>> => {\r\n  const dataProvider = useDataProvider();\r\n  const queryKey = queryKeys(resource, dataProviderName, metaData);\r\n\r\n  const { getOne } = dataProvider(dataProviderName);\r\n\r\n  const queryResponse = useQuery<GetOneResponse<TData>, TError>(\r\n    queryKey.detail(id),\r\n    () => getOne<TData>({ resource, id, metaData }),\r\n    {\r\n      ...queryOptions,\r\n      onSuccess: (data) => {\r\n        queryOptions?.onSuccess?.(data);\r\n      },\r\n      onError: (err: TError) => {\r\n        queryOptions?.onError?.(err);\r\n      },\r\n    }\r\n  );\r\n\r\n  return queryResponse;\r\n};\r\n","import { QueryObserverResult, useQuery, UseQueryOptions } from \"react-query\";\r\n\r\nimport {\r\n  BaseRecord,\r\n  BaseKey,\r\n  GetManyResponse,\r\n  HttpError,\r\n  MetaDataQuery,\r\n} from \"../../interfaces\";\r\nimport { useDataProvider } from \"../data\";\r\nimport { queryKeys } from \"../../definitions/helpers/queryKeys\";\r\n\r\nexport type UseManyProps<TData, TError> = {\r\n  resource: string;\r\n  ids: BaseKey[];\r\n  queryOptions?: UseQueryOptions<GetManyResponse<TData>, TError>;\r\n\r\n  metaData?: MetaDataQuery;\r\n  dataProviderName?: string;\r\n};\r\n\r\nexport const useMany = <\r\n  TData extends BaseRecord = BaseRecord,\r\n  TError extends HttpError = HttpError\r\n>({\r\n  resource,\r\n  ids,\r\n  queryOptions,\r\n  metaData,\r\n  dataProviderName,\r\n}: UseManyProps<TData, TError>): QueryObserverResult<\r\n  GetManyResponse<TData>\r\n> => {\r\n  const dataProvider = useDataProvider();\r\n  const queryKey = queryKeys(resource, dataProviderName, metaData);\r\n\r\n  const { getMany } = dataProvider(dataProviderName);\r\n\r\n  const isEnabled =\r\n    queryOptions?.enabled === undefined || queryOptions?.enabled === true;\r\n\r\n  const queryResponse = useQuery<GetManyResponse<TData>, TError>(\r\n    queryKey.many(ids),\r\n    () => getMany<TData>({ resource, ids, metaData }),\r\n    {\r\n      ...queryOptions,\r\n      onSuccess: (data) => {\r\n        queryOptions?.onSuccess?.(data);\r\n      },\r\n      onError: (err: TError) => {\r\n        queryOptions?.onError?.(err);\r\n      },\r\n    }\r\n  );\r\n\r\n  return queryResponse;\r\n};\r\n","import { useMutation, UseMutationResult, useQueryClient } from \"react-query\";\r\n\r\nimport {\r\n    BaseRecord,\r\n    BaseKey,\r\n    UpdateResponse,\r\n    MutationMode,\r\n    PrevContext as UpdateContext,\r\n    HttpError,\r\n    MetaDataQuery,\r\n    PreviousQuery,\r\n    GetListResponse,\r\n    IQueryKeys,\r\n} from \"../../interfaces\";\r\nimport {\r\n    useMutationMode,\r\n    useDataProvider,\r\n    useInvalidate,\r\n} from \"../../hooks\";\r\nimport { queryKeys } from \"../../definitions/helpers/queryKeys\";\r\n\r\nexport type UpdateParams<TVariables> = {\r\n    id: BaseKey;\r\n    resource: string;\r\n    mutationMode?: MutationMode;\r\n    undoableTimeout?: number;\r\n    onCancel?: (cancelMutation: () => void) => void;\r\n    values: TVariables;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n    invalidates?: Array<keyof IQueryKeys>;\r\n};\r\n\r\nexport type UseUpdateReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n> = UseMutationResult<\r\n    UpdateResponse<TData>,\r\n    TError,\r\n    UpdateParams<TVariables>,\r\n    UpdateContext<TData>\r\n>;\r\n\r\n/**\r\n * `useUpdate` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for update mutations.\r\n *\r\n * It uses `update` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useUpdate} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\r\n * @typeParam TVariables - Values for mutation function\r\n *\r\n */\r\nexport const useUpdate = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n>(): UseUpdateReturnType<TData, TError, TVariables> => {\r\n    const queryClient = useQueryClient();\r\n    const dataProvider = useDataProvider();\r\n\r\n    const {\r\n        mutationMode: mutationModeContext,\r\n        undoableTimeout: undoableTimeoutContext,\r\n    } = useMutationMode();\r\n    const invalidateStore = useInvalidate();\r\n\r\n    const mutation = useMutation<\r\n        UpdateResponse<TData>,\r\n        TError,\r\n        UpdateParams<TVariables>,\r\n        UpdateContext<TData>\r\n    >(\r\n        ({\r\n            id,\r\n            values,\r\n            resource,\r\n            mutationMode,\r\n            undoableTimeout,\r\n            onCancel,\r\n            metaData,\r\n            dataProviderName,\r\n        }) => {\r\n            const mutationModePropOrContext =\r\n                mutationMode ?? mutationModeContext;\r\n\r\n            const undoableTimeoutPropOrContext =\r\n                undoableTimeout ?? undoableTimeoutContext;\r\n\r\n            if (!(mutationModePropOrContext === \"undoable\")) {\r\n                return dataProvider(dataProviderName).update<TData, TVariables>(\r\n                    {\r\n                        resource,\r\n                        id,\r\n                        variables: values,\r\n                        metaData,\r\n                    },\r\n                );\r\n            }\r\n            const updatePromise = new Promise<UpdateResponse<TData>>(\r\n                (resolve, reject) => {\r\n                    const doMutation = () => {\r\n                        dataProvider(dataProviderName)\r\n                            .update<TData, TVariables>({\r\n                                resource,\r\n                                id,\r\n                                variables: values,\r\n                                metaData,\r\n                            })\r\n                            .then((result) => resolve(result))\r\n                            .catch((err) => reject(err));\r\n                    };\r\n\r\n                    const cancelMutation = () => {\r\n                        reject({ message: \"mutationCancelled\" });\r\n                    };\r\n\r\n                    if (onCancel) {\r\n                        onCancel(cancelMutation);\r\n                    }\r\n\r\n               \r\n                },\r\n            );\r\n            return updatePromise;\r\n        },\r\n        {\r\n            onMutate: async ({\r\n                resource,\r\n                id,\r\n                mutationMode,\r\n                values,\r\n                dataProviderName,\r\n            }) => {\r\n                const queryKey = queryKeys(resource, dataProviderName);\r\n\r\n                const previousQueries: PreviousQuery<TData>[] =\r\n                    queryClient.getQueriesData(queryKey.resourceAll);\r\n\r\n                const mutationModePropOrContext =\r\n                    mutationMode ?? mutationModeContext;\r\n\r\n                await queryClient.cancelQueries(\r\n                    queryKey.resourceAll,\r\n                    undefined,\r\n                    {\r\n                        silent: true,\r\n                    },\r\n                );\r\n\r\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\r\n                    // Set the previous queries to the new ones:\r\n                    queryClient.setQueriesData(\r\n                        queryKey.list(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n                            const data = previous.data.map((record: TData) => {\r\n                                if (record.id?.toString() === id?.toString()) {\r\n                                    return {\r\n                                        id,\r\n                                        ...values,\r\n                                    } as unknown as TData;\r\n                                }\r\n                                return record;\r\n                            });\r\n\r\n                            return {\r\n                                ...previous,\r\n                                data,\r\n                            };\r\n                        },\r\n                    );\r\n\r\n                    queryClient.setQueriesData(\r\n                        queryKey.many(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n\r\n                            const data = previous.data.map((record: TData) => {\r\n                                if (record.id?.toString() === id?.toString()) {\r\n                                    record = {\r\n                                        id,\r\n                                        ...values,\r\n                                    } as unknown as TData;\r\n                                }\r\n                                return record;\r\n                            });\r\n                            return {\r\n                                ...previous,\r\n                                data,\r\n                            };\r\n                        },\r\n                    );\r\n\r\n                    queryClient.setQueriesData(\r\n                        queryKey.detail(id),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n\r\n                            return {\r\n                                ...previous,\r\n                                data: {\r\n                                    ...previous.data,\r\n                                    ...values,\r\n                                },\r\n                            };\r\n                        },\r\n                    );\r\n                }\r\n\r\n                return {\r\n                    previousQueries,\r\n                    queryKey,\r\n                };\r\n            },\r\n            onSettled: (\r\n                _data,\r\n                _error,\r\n                {\r\n                    id,\r\n                    resource,\r\n                    dataProviderName,\r\n                    invalidates = [\"list\", \"many\", \"detail\"],\r\n                },\r\n            ) => {\r\n                invalidateStore({\r\n                    resource,\r\n                    dataProviderName,\r\n                    invalidates,\r\n                    id,\r\n                });\r\n\r\n            },\r\n            onSuccess: (data, { id, resource }) => {\r\n              \r\n            },\r\n            onError: (\r\n                err: TError,\r\n                { id, resource },\r\n                context,\r\n            ) => {\r\n                // set back the queries to the context:\r\n\r\n                if (context) {\r\n                    for (const query of context.previousQueries) {\r\n                        queryClient.setQueryData(query[0], query[1]);\r\n                    }\r\n                }\r\n\r\n                if (err.message !== \"mutationCancelled\") {\r\n                   \r\n\r\n                }\r\n            },\r\n        },\r\n    );\r\n\r\n    return mutation;\r\n};","import { useMutation, UseMutationResult, useQueryClient } from \"react-query\";\r\nimport {\r\n  CreateResponse,\r\n  BaseRecord,\r\n  HttpError,\r\n  MetaDataQuery,\r\n  IQueryKeys,\r\n} from \"../../interfaces\";\r\nimport { useDataProvider, useInvalidate } from \"../../hooks\";\r\n\r\ntype useCreateParams<TVariables> = {\r\n  resource: string;\r\n  values: TVariables;\r\n  metaData?: MetaDataQuery;\r\n  dataProviderName?: string;\r\n  invalidates?: Array<keyof IQueryKeys>;\r\n};\r\n\r\nexport type UseCreateReturnType<\r\n  TData extends BaseRecord = BaseRecord,\r\n  TError extends HttpError = HttpError,\r\n  TVariables = {}\r\n> = UseMutationResult<\r\n  CreateResponse<TData>,\r\n  TError,\r\n  useCreateParams<TVariables>,\r\n  unknown\r\n>;\r\n\r\nexport const useCreate = <\r\n  TData extends BaseRecord = BaseRecord,\r\n  TError extends HttpError = HttpError,\r\n  TVariables = {}\r\n>(): UseCreateReturnType<TData, TError, TVariables> => {\r\n  const dataProvider = useDataProvider();\r\n  const invalidateStore = useInvalidate();\r\n\r\n  const mutation = useMutation<\r\n    CreateResponse<TData>,\r\n    TError,\r\n    useCreateParams<TVariables>,\r\n    unknown\r\n  >(\r\n    ({\r\n      resource,\r\n      values,\r\n      metaData,\r\n      dataProviderName,\r\n    }: useCreateParams<TVariables>) => {\r\n      return dataProvider(dataProviderName).create<TData, TVariables>({\r\n        resource,\r\n        variables: values,\r\n        metaData,\r\n      });\r\n    },\r\n    {\r\n      onSuccess: (\r\n        data,\r\n        { resource, dataProviderName, invalidates = [\"list\", \"many\"] }\r\n      ) => {\r\n\r\n        invalidateStore({\r\n          resource,\r\n          dataProviderName,\r\n          invalidates,\r\n        });\r\n      },\r\n      onError: (err: TError, { resource }) => {},\r\n    }\r\n  );\r\n\r\n  return mutation;\r\n};\r\n","import { useQueryClient, useMutation, UseMutationResult } from \"react-query\";\r\nimport pluralize from \"pluralize\";\r\n\r\nimport {\r\n    useMutationMode,\r\n    useDataProvider,\r\n    useInvalidate,\r\n} from \"../../hooks\";\r\nimport {\r\n    DeleteOneResponse,\r\n    MutationMode,\r\n    PrevContext as DeleteContext,\r\n    BaseRecord,\r\n    BaseKey,\r\n    HttpError,\r\n    GetListResponse,\r\n    MetaDataQuery,\r\n    PreviousQuery,\r\n    IQueryKeys,\r\n} from \"../../interfaces\";\r\nimport { queryKeys } from \"../../definitions/helpers/queryKeys\";\r\nexport type DeleteParams<TVariables> = {\r\n    id: BaseKey;\r\n    resource: string;\r\n    mutationMode?: MutationMode;\r\n    undoableTimeout?: number;\r\n    onCancel?: (cancelMutation: () => void) => void;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n    invalidates?: Array<keyof IQueryKeys>;\r\n    values?: TVariables;\r\n} ;\r\n\r\nexport type UseDeleteReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError = HttpError,\r\n    TVariables = {},\r\n> = UseMutationResult<\r\n    DeleteOneResponse<TData>,\r\n    TError,\r\n    DeleteParams<TVariables>,\r\n    DeleteContext<TData>\r\n>;\r\n\r\n\r\nexport const useDelete = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n>(): UseDeleteReturnType<TData, TError, TVariables> => {\r\n    const dataProvider = useDataProvider();\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    const {\r\n        mutationMode: mutationModeContext,\r\n        undoableTimeout: undoableTimeoutContext,\r\n    } = useMutationMode();\r\n\r\n    const invalidateStore = useInvalidate();\r\n\r\n    const mutation = useMutation<\r\n        DeleteOneResponse<TData>,\r\n        TError,\r\n        DeleteParams<TVariables>,\r\n        DeleteContext<TData>\r\n    >(\r\n        ({\r\n            id,\r\n            mutationMode,\r\n            undoableTimeout,\r\n            resource,\r\n            onCancel,\r\n            metaData,\r\n            dataProviderName,\r\n            values,\r\n        }) => {\r\n            const mutationModePropOrContext =\r\n                mutationMode ?? mutationModeContext;\r\n\r\n            const undoableTimeoutPropOrContext =\r\n                undoableTimeout ?? undoableTimeoutContext;\r\n\r\n            if (!(mutationModePropOrContext === \"undoable\")) {\r\n                return dataProvider(dataProviderName).deleteOne<TData>({\r\n                    resource,\r\n                    id,\r\n                    metaData,\r\n                    //variables: values,\r\n                });\r\n            }\r\n\r\n            const deletePromise = new Promise<DeleteOneResponse<TData>>(\r\n                (resolve, reject) => {\r\n                    const doMutation = () => {\r\n                        dataProvider(dataProviderName)\r\n                            .deleteOne<TData>({\r\n                                resource,\r\n                                id,\r\n                                metaData,\r\n                               // variables: values,\r\n                            })\r\n                            .then((result) => resolve(result))\r\n                            .catch((err) => reject(err));\r\n                    };\r\n\r\n                    const cancelMutation = () => {\r\n                        reject({ message: \"mutationCancelled\" });\r\n                    };\r\n\r\n                    if (onCancel) {\r\n                        onCancel(cancelMutation);\r\n                    }\r\n\r\n                   \r\n                },\r\n            );\r\n            return deletePromise;\r\n        },\r\n        {\r\n            onMutate: async ({\r\n                id,\r\n                resource,\r\n                mutationMode,\r\n                dataProviderName,\r\n            }) => {\r\n                const queryKey = queryKeys(resource, dataProviderName);\r\n\r\n                const mutationModePropOrContext =\r\n                    mutationMode ?? mutationModeContext;\r\n\r\n                await queryClient.cancelQueries(\r\n                    queryKey.resourceAll,\r\n                    undefined,\r\n                    {\r\n                        silent: true,\r\n                    },\r\n                );\r\n\r\n                const previousQueries: PreviousQuery<TData>[] =\r\n                    queryClient.getQueriesData(queryKey.resourceAll);\r\n\r\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\r\n                    // Set the previous queries to the new ones:\r\n                    queryClient.setQueriesData(\r\n                        queryKey.list(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n                            const data = previous.data.filter(\r\n                                (record: TData) =>\r\n                                    record.id?.toString() !== id.toString(),\r\n                            );\r\n\r\n                            return {\r\n                                data,\r\n                                total: previous.total - 1,\r\n                            };\r\n                        },\r\n                    );\r\n\r\n                    queryClient.setQueriesData(\r\n                        queryKey.many(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n                            const data = previous.data.filter(\r\n                                (record: TData) => {\r\n                                    return (\r\n                                        record.id?.toString() !== id?.toString()\r\n                                    );\r\n                                },\r\n                            );\r\n\r\n                            return {\r\n                                ...previous,\r\n                                data,\r\n                            };\r\n                        },\r\n                    );\r\n                }\r\n\r\n                return {\r\n                    previousQueries,\r\n                    queryKey,\r\n                };\r\n            },\r\n            onSettled: (\r\n                _data,\r\n                _error,\r\n                {\r\n                    id,\r\n                    resource,\r\n                    dataProviderName,\r\n                    invalidates = [\"list\", \"many\"],\r\n                },\r\n            ) => {\r\n                // invalidate the cache for the list and many queries:\r\n\r\n                invalidateStore({\r\n                    resource,\r\n                    dataProviderName,\r\n                    invalidates,\r\n                });\r\n\r\n              \r\n            },\r\n            onSuccess: (\r\n                _data,\r\n                { id, resource },\r\n                context,\r\n            ) => {\r\n\r\n                // Remove the queries from the cache:\r\n                queryClient.removeQueries(context.queryKey.detail(id));\r\n\r\n               \r\n            },\r\n            onError: (\r\n                err: TError,\r\n                { id, resource },\r\n                context,\r\n            ) => {\r\n                // set back the queries to the context:\r\n                if (context) {\r\n                    for (const query of context.previousQueries) {\r\n                        queryClient.setQueryData(query[0], query[1]);\r\n                    }\r\n                }\r\n\r\n                if (err.message !== \"mutationCancelled\") {\r\n                   \r\n\r\n                   \r\n                }\r\n            },\r\n        },\r\n    );\r\n\r\n    return mutation;\r\n};","import { useQueryClient, useMutation, UseMutationResult } from \"react-query\";\r\n\r\nimport {\r\n    BaseRecord,\r\n    CreateManyResponse,\r\n    HttpError,\r\n    MetaDataQuery,\r\n    IQueryKeys,\r\n} from \"../../interfaces\";\r\nimport {\r\n    useDataProvider,\r\n    useInvalidate,\r\n} from \"../../hooks\";\r\nimport pluralize from \"pluralize\";\r\n\r\ntype useCreateManyParams<TVariables> = {\r\n    resource: string;\r\n    values: TVariables[];\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n    invalidates?: Array<keyof IQueryKeys>;\r\n} ;\r\n\r\nexport type UseCreateManyReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError = HttpError,\r\n    TVariables = {},\r\n> = UseMutationResult<\r\n    CreateManyResponse<TData>,\r\n    TError,\r\n    useCreateManyParams<TVariables>,\r\n    unknown\r\n>;\r\n\r\n\r\nexport const useCreateMany = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n>(): UseCreateManyReturnType<TData, TError, TVariables> => {\r\n    const dataProvider = useDataProvider();\r\n\r\n    \r\n    const invalidateStore = useInvalidate();\r\n\r\n    const mutation = useMutation<\r\n        CreateManyResponse<TData>,\r\n        TError,\r\n        useCreateManyParams<TVariables>\r\n    >(\r\n        ({\r\n            resource,\r\n            values,\r\n            metaData,\r\n            dataProviderName,\r\n        }: useCreateManyParams<TVariables>) =>\r\n            dataProvider(dataProviderName).createMany<TData, TVariables>({\r\n                resource,\r\n                variables: values,\r\n                metaData,\r\n            }),\r\n        {\r\n            onSuccess: (\r\n                response,\r\n                {\r\n                    resource,\r\n                    dataProviderName,\r\n                    invalidates = [\"list\", \"many\"],\r\n                },\r\n            ) => {\r\n                const resourcePlural = pluralize.plural(resource);\r\n\r\n               \r\n\r\n                invalidateStore({\r\n                    resource,\r\n                    dataProviderName,\r\n                    invalidates,\r\n                });\r\n\r\n               \r\n            },\r\n            onError: (err: TError, { resource }) => {\r\n               \r\n            },\r\n        },\r\n    );\r\n\r\n    return mutation;\r\n};","import { useMutation, UseMutationResult, useQueryClient } from \"react-query\";\r\nimport pluralize from \"pluralize\";\r\n\r\nimport {\r\n\r\n    useMutationMode,\r\n \r\n    useDataProvider,\r\n    useInvalidate,\r\n} from \"../../hooks\";\r\nimport {\r\n    BaseRecord,\r\n    BaseKey,\r\n    UpdateManyResponse,\r\n    HttpError,\r\n    MutationMode,\r\n    QueryResponse,\r\n    PrevContext as UpdateContext,\r\n    MetaDataQuery,\r\n    GetListResponse,\r\n    IQueryKeys,\r\n} from \"../../interfaces\";\r\nimport { queryKeys } from \"../../definitions/helpers/queryKeys\";\r\n\r\ntype UpdateManyParams<TVariables> = {\r\n    ids: BaseKey[];\r\n    resource: string;\r\n    mutationMode?: MutationMode;\r\n    undoableTimeout?: number;\r\n    onCancel?: (cancelMutation: () => void) => void;\r\n    values: TVariables;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n    invalidates?: Array<keyof IQueryKeys>;\r\n} ;\r\n\r\ntype UseUpdateManyReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n> = UseMutationResult<\r\n    UpdateManyResponse<TData>,\r\n    TError,\r\n    UpdateManyParams<TVariables>,\r\n    UpdateContext<TData>\r\n>;\r\n\r\n\r\nexport const useUpdateMany = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n>(): UseUpdateManyReturnType<TData, TError, TVariables> => {\r\n    const queryClient = useQueryClient();\r\n    const dataProvider = useDataProvider();\r\n\r\n    const {\r\n        mutationMode: mutationModeContext,\r\n        undoableTimeout: undoableTimeoutContext,\r\n    } = useMutationMode();\r\n   \r\n    const invalidateStore = useInvalidate();\r\n\r\n    const mutation = useMutation<\r\n        UpdateManyResponse<TData>,\r\n        TError,\r\n        UpdateManyParams<TVariables>,\r\n        UpdateContext<TData>\r\n    >(\r\n        ({\r\n            ids,\r\n            values,\r\n            resource,\r\n            onCancel,\r\n            mutationMode,\r\n            undoableTimeout,\r\n            metaData,\r\n            dataProviderName,\r\n        }: UpdateManyParams<TVariables>) => {\r\n            const mutationModePropOrContext =\r\n                mutationMode ?? mutationModeContext;\r\n\r\n            const undoableTimeoutPropOrContext =\r\n                undoableTimeout ?? undoableTimeoutContext;\r\n\r\n            if (!(mutationModePropOrContext === \"undoable\")) {\r\n                return dataProvider(dataProviderName).updateMany<\r\n                    TData,\r\n                    TVariables\r\n                >({\r\n                    resource,\r\n                    ids,\r\n                    variables: values,\r\n                    metaData,\r\n                });\r\n            }\r\n\r\n            const updatePromise = new Promise<UpdateManyResponse<TData>>(\r\n                (resolve, reject) => {\r\n                    const doMutation = () => {\r\n                        dataProvider(dataProviderName)\r\n                            .updateMany<TData, TVariables>({\r\n                                resource,\r\n                                ids,\r\n                                variables: values,\r\n                                metaData,\r\n                            })\r\n                            .then((result) => resolve(result))\r\n                            .catch((err) => reject(err));\r\n                    };\r\n\r\n                    const cancelMutation = () => {\r\n                        reject({ message: \"mutationCancelled\" });\r\n                    };\r\n\r\n                    if (onCancel) {\r\n                        onCancel(cancelMutation);\r\n                    }\r\n\r\n                },\r\n            );\r\n            return updatePromise;\r\n        },\r\n\r\n        {\r\n            onMutate: async ({\r\n                resource,\r\n                ids,\r\n                values,\r\n                mutationMode,\r\n                dataProviderName,\r\n                metaData,\r\n            }) => {\r\n                const queryKey = queryKeys(\r\n                    resource,\r\n                    dataProviderName,\r\n                    metaData,\r\n                );\r\n\r\n                const mutationModePropOrContext =\r\n                    mutationMode ?? mutationModeContext;\r\n\r\n                await queryClient.cancelQueries(\r\n                    queryKey.resourceAll,\r\n                    undefined,\r\n                    {\r\n                        silent: true,\r\n                    },\r\n                );\r\n\r\n                const previousQueries = queryClient.getQueriesData<\r\n                    QueryResponse<TData>\r\n                >(queryKey.resourceAll);\r\n\r\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\r\n                    // Set the previous queries to the new ones:\r\n                    queryClient.setQueriesData(\r\n                        queryKey.list(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n\r\n                            const data = previous.data.map((record: TData) => {\r\n                                if (\r\n                                    record.id !== undefined &&\r\n                                    ids\r\n                                        .filter((id) => id !== undefined)\r\n                                        .map(String)\r\n                                        .includes(record.id.toString())\r\n                                ) {\r\n                                    return {\r\n                                        ...record,\r\n                                        ...values,\r\n                                    };\r\n                                }\r\n\r\n                                return record;\r\n                            });\r\n\r\n                            return {\r\n                                ...previous,\r\n                                data,\r\n                            };\r\n                        },\r\n                    );\r\n\r\n                    queryClient.setQueriesData(\r\n                        queryKey.many(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n\r\n                            const data = previous.data.map((record: TData) => {\r\n                                if (\r\n                                    record.id !== undefined &&\r\n                                    ids\r\n                                        .filter((id) => id !== undefined)\r\n                                        .map(String)\r\n                                        .includes(record.id.toString())\r\n                                ) {\r\n                                    return {\r\n                                        ...record,\r\n                                        ...values,\r\n                                    };\r\n                                }\r\n                                return record;\r\n                            });\r\n                            return {\r\n                                ...previous,\r\n                                data,\r\n                            };\r\n                        },\r\n                    );\r\n                    for (const id of ids) {\r\n                        queryClient.setQueriesData(\r\n                            queryKey.detail(id),\r\n                            (previous?: GetListResponse<TData> | null) => {\r\n                                if (!previous) {\r\n                                    return null;\r\n                                }\r\n\r\n                                const data = {\r\n                                    ...previous.data,\r\n                                    ...values,\r\n                                };\r\n                                return {\r\n                                    ...previous,\r\n                                    data,\r\n                                };\r\n                            },\r\n                        );\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    previousQueries,\r\n                    queryKey,\r\n                };\r\n            },\r\n            onSettled: (_data, _error, { ids, resource, dataProviderName }) => {\r\n                // invalidate the cache for the list and many queries:\r\n\r\n                invalidateStore({\r\n                    resource,\r\n                    invalidates: [\"list\", \"many\"],\r\n                    dataProviderName,\r\n                });\r\n\r\n                ids.forEach((id) =>\r\n                    invalidateStore({\r\n                        resource,\r\n                        invalidates: [\"detail\"],\r\n                        dataProviderName,\r\n                        id,\r\n                    }),\r\n                );\r\n\r\n             \r\n            },\r\n            onSuccess: (_data, { ids, resource }) => {\r\n                \r\n            },\r\n            onError: (\r\n                err: TError,\r\n                { ids, resource },\r\n                context,\r\n            ) => {\r\n                // set back the queries to the context:\r\n\r\n                if (context) {\r\n                    for (const query of context.previousQueries) {\r\n                        queryClient.setQueryData(query[0], query[1]);\r\n                    }\r\n                }\r\n\r\n                if (err.message !== \"mutationCancelled\") {\r\n      \r\n                }\r\n            },\r\n        },\r\n    );\r\n\r\n    return mutation;\r\n};","import { useQueryClient, useMutation, UseMutationResult } from \"react-query\";\r\nimport pluralize from \"pluralize\";\r\n\r\nimport {\r\n    DeleteManyResponse,\r\n    HttpError,\r\n    BaseRecord,\r\n    BaseKey,\r\n    MutationMode,\r\n    PreviousQuery,\r\n    GetListResponse,\r\n    PrevContext as DeleteContext,\r\n    MetaDataQuery,\r\n    IQueryKeys,\r\n} from \"../../interfaces\";\r\nimport {\r\n    useMutationMode,\r\n    useDataProvider,\r\n    useInvalidate,\r\n} from \"../../hooks\";\r\nimport { queryKeys } from \"../../definitions/helpers/queryKeys\";\r\n\r\nexport type DeleteManyParams<TVariables> = {\r\n    ids: BaseKey[];\r\n    resource: string;\r\n    mutationMode?: MutationMode;\r\n    undoableTimeout?: number;\r\n    onCancel?: (cancelMutation: () => void) => void;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n    invalidates?: Array<keyof IQueryKeys>;\r\n    values?: TVariables;\r\n} ;\r\n\r\nexport type UseDeleteManyReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError = HttpError,\r\n    TVariables = {},\r\n> = UseMutationResult<\r\n    DeleteManyResponse<TData>,\r\n    TError,\r\n    DeleteManyParams<TVariables>,\r\n    unknown\r\n>;\r\n\r\n\r\nexport const useDeleteMany = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n>(): UseDeleteManyReturnType<TData, TError, TVariables> => {\r\n\r\n    const {\r\n        mutationMode: mutationModeContext,\r\n        undoableTimeout: undoableTimeoutContext,\r\n    } = useMutationMode();\r\n    const dataProvider = useDataProvider();\r\n    const invalidateStore = useInvalidate();\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    const mutation = useMutation<\r\n        DeleteManyResponse<TData>,\r\n        TError,\r\n        DeleteManyParams<TVariables>,\r\n        DeleteContext<TData>\r\n    >(\r\n        ({\r\n            resource,\r\n            ids,\r\n            mutationMode,\r\n            undoableTimeout,\r\n            onCancel,\r\n            metaData,\r\n            dataProviderName,\r\n            values,\r\n        }: DeleteManyParams<TVariables>) => {\r\n            const mutationModePropOrContext =\r\n                mutationMode ?? mutationModeContext;\r\n\r\n            const undoableTimeoutPropOrContext =\r\n                undoableTimeout ?? undoableTimeoutContext;\r\n            if (!(mutationModePropOrContext === \"undoable\")) {\r\n                return dataProvider(dataProviderName).deleteMany<TData>({\r\n                    resource,\r\n                    ids,\r\n                    metaData,\r\n                   // variables: values,\r\n                });\r\n            }\r\n\r\n            const updatePromise = new Promise<DeleteManyResponse<TData>>(\r\n                (resolve, reject) => {\r\n                    const doMutation = () => {\r\n                        dataProvider(dataProviderName)\r\n                            .deleteMany<TData>({\r\n                                resource,\r\n                                ids,\r\n                                metaData,\r\n                               // variables: values,\r\n                            })\r\n                            .then((result) => resolve(result))\r\n                            .catch((err) => reject(err));\r\n                    };\r\n\r\n                    const cancelMutation = () => {\r\n                        reject({ message: \"mutationCancelled\" });\r\n                    };\r\n\r\n                    if (onCancel) {\r\n                        onCancel(cancelMutation);\r\n                    }\r\n\r\n                 \r\n                },\r\n            );\r\n            return updatePromise;\r\n        },\r\n        {\r\n            onMutate: async ({\r\n                ids,\r\n                resource,\r\n                mutationMode,\r\n                dataProviderName,\r\n            }) => {\r\n                const queryKey = queryKeys(resource, dataProviderName);\r\n\r\n                const mutationModePropOrContext =\r\n                    mutationMode ?? mutationModeContext;\r\n\r\n                await queryClient.cancelQueries(\r\n                    queryKey.resourceAll,\r\n                    undefined,\r\n                    {\r\n                        silent: true,\r\n                    },\r\n                );\r\n\r\n                const previousQueries: PreviousQuery<TData>[] =\r\n                    queryClient.getQueriesData(queryKey.resourceAll);\r\n\r\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\r\n                    // Set the previous queries to the new ones:\r\n                    queryClient.setQueriesData(\r\n                        queryKey.list(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n\r\n                            const data = previous.data.filter(\r\n                                (item) =>\r\n                                    item.id &&\r\n                                    !ids\r\n                                        .map(String)\r\n                                        .includes(item.id.toString()),\r\n                            );\r\n\r\n                            return {\r\n                                data,\r\n                                total: previous.total - 1,\r\n                            };\r\n                        },\r\n                    );\r\n\r\n                    queryClient.setQueriesData(\r\n                        queryKey.many(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n\r\n                            const data = previous.data.filter(\r\n                                (record: TData) => {\r\n                                    if (record.id) {\r\n                                        return !ids\r\n                                            .map(String)\r\n                                            .includes(record.id.toString());\r\n                                    }\r\n                                    return false;\r\n                                },\r\n                            );\r\n\r\n                            return {\r\n                                ...previous,\r\n                                data,\r\n                            };\r\n                        },\r\n                    );\r\n\r\n                    for (const id of ids) {\r\n                        queryClient.setQueriesData(\r\n                            queryKey.detail(id),\r\n                            (previous?: any | null) => {\r\n                                if (!previous || previous.data.id == id) {\r\n                                    return null;\r\n                                }\r\n                                return {\r\n                                    ...previous,\r\n                                };\r\n                            },\r\n                        );\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    previousQueries,\r\n                    queryKey,\r\n                };\r\n            },\r\n            // Always refetch after error or success:\r\n            onSettled: (\r\n                _data,\r\n                _error,\r\n                {\r\n                    resource,\r\n                    ids,\r\n                    dataProviderName,\r\n                    invalidates = [\"list\", \"many\"],\r\n                },\r\n            ) => {\r\n                // invalidate the cache for the list and many queries:\r\n                invalidateStore({\r\n                    resource,\r\n                    dataProviderName,\r\n                    invalidates,\r\n                });\r\n\r\n                \r\n            },\r\n            onSuccess: (\r\n                _data,\r\n                { ids, resource },\r\n                context,\r\n            ) => {\r\n                // Remove the queries from the cache:\r\n                ids.forEach((id) =>\r\n                    queryClient.removeQueries(context.queryKey.detail(id)),\r\n                );\r\n\r\n            },\r\n            onError: (err, { ids, resource }, context) => {\r\n                // set back the queries to the context:\r\n                if (context) {\r\n                    for (const query of context.previousQueries) {\r\n                        queryClient.setQueryData(query[0], query[1]);\r\n                    }\r\n                }\r\n\r\n                if (err.message !== \"mutationCancelled\") {\r\n\r\n\r\n                    \r\n                }\r\n            },\r\n        },\r\n    );\r\n\r\n    return mutation;\r\n};","import { useDataProvider } from \"../data\";\r\n\r\nexport const useApiUrl = (dataProviderName?: string): string => {\r\n    const dataProvider = useDataProvider();\r\n\r\n    const { getApiUrl } = dataProvider(dataProviderName);\r\n\r\n    return getApiUrl();\r\n};","import { QueryObserverResult, useQuery, UseQueryOptions } from \"react-query\";\r\n\r\nimport {\r\n    CustomResponse,\r\n    CrudSorting,\r\n    CrudFilters,\r\n    BaseRecord,\r\n    HttpError,\r\n    MetaDataQuery,\r\n} from \"../../interfaces\";\r\nimport {\r\n    \r\n    useDataProvider,\r\n} from \"../../hooks\";\r\n\r\ninterface UseCustomConfig<TQuery, TPayload> {\r\n    sort?: CrudSorting;\r\n    filters?: CrudFilters;\r\n    query?: TQuery;\r\n    payload?: TPayload;\r\n    headers?: {};\r\n}\r\n\r\nexport type UseCustomProps<TData, TError, TQuery, TPayload> = {\r\n    url: string;\r\n    method: \"get\" | \"delete\" | \"head\" | \"options\" | \"post\" | \"put\" | \"patch\";\r\n    config?: UseCustomConfig<TQuery, TPayload>;\r\n    queryOptions?: UseQueryOptions<CustomResponse<TData>, TError>;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n};\r\n\r\n\r\nexport const useCustom = <\r\n    TData = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TQuery = unknown,\r\n    TPayload = unknown,\r\n>({\r\n    url,\r\n    method,\r\n    config,\r\n    queryOptions,\r\n    metaData,\r\n    dataProviderName,\r\n}: UseCustomProps<TData, TError, TQuery, TPayload>): QueryObserverResult<\r\n    CustomResponse<TData>,\r\n    TError\r\n> => {\r\n    const dataProvider = useDataProvider();\r\n\r\n    const { custom } = dataProvider(dataProviderName);\r\n\r\n    if (custom) {\r\n        const queryResponse = useQuery<CustomResponse<TData>, TError>(\r\n            [\r\n                dataProviderName,\r\n                \"custom\",\r\n                method,\r\n                url,\r\n                { ...config, ...metaData },\r\n            ],\r\n            () => custom<TData>({ url, method, ...config, metaData }),\r\n            {\r\n                ...queryOptions,\r\n                onSuccess: (data) => {\r\n                    queryOptions?.onSuccess?.(data);\r\n                },\r\n                onError: (err: TError) => {\r\n                    queryOptions?.onError?.(err);\r\n\r\n                   \r\n                },\r\n            },\r\n        );\r\n        return queryResponse;\r\n    } else {\r\n        throw Error(\"Not implemented custom on data provider.\");\r\n    }\r\n};","import { useCallback, useContext } from \"react\";\r\n\r\nimport { DataContext } from \"../../contexts/data\";\r\nimport {\r\n    IDataContextProvider,\r\n    IDataMultipleContextProvider,\r\n} from \"../../interfaces\";\r\n\r\nexport const useDataProvider = (): ((\r\n    dataProviderName?: string,\r\n) => IDataContextProvider) => {\r\n    const context = useContext<IDataMultipleContextProvider>(DataContext);\r\n\r\n    const handleDataProvider = useCallback(\r\n        (dataProviderName?: string) => {\r\n            if (dataProviderName) {\r\n                const dataProvider = context[dataProviderName];\r\n                if (!dataProvider) {\r\n                    throw new Error(\r\n                        `\"${dataProviderName}\" Data provider not found`,\r\n                    );\r\n                }\r\n                return context[dataProviderName];\r\n            }\r\n            if (context.default) {\r\n                return context.default;\r\n            } else\r\n                throw new Error(\r\n                    `There is no \"default\" data provider. Please pass dataProviderName.`,\r\n                );\r\n        },\r\n        [context],\r\n    );\r\n\r\n    return handleDataProvider;\r\n};","import { useCallback } from \"react\";\r\nimport { useQueryClient } from \"react-query\";\r\n\r\nimport { queryKeys } from \"../../definitions/helpers/queryKeys\";\r\nimport { BaseKey, IQueryKeys } from \"../../interfaces\";\r\n\r\nexport type UseInvalidateProp = {\r\n    resource: string;\r\n    id?: BaseKey;\r\n    dataProviderName?: string;\r\n    invalidates: Array<keyof IQueryKeys> | false;\r\n};\r\n\r\nexport const useInvalidate = (): ((props: UseInvalidateProp) => void) => {\r\n    const queryClient = useQueryClient();\r\n\r\n    const invalidate = useCallback(\r\n        ({\r\n            resource,\r\n            dataProviderName,\r\n            invalidates,\r\n            id,\r\n        }: UseInvalidateProp) => {\r\n            if (invalidates === false) {\r\n                return;\r\n            }\r\n            const queryKey = queryKeys(resource, dataProviderName);\r\n\r\n            invalidates.forEach((key) => {\r\n                switch (key) {\r\n                    case \"all\":\r\n                        queryClient.invalidateQueries(queryKey.all);\r\n                        break;\r\n                    case \"list\":\r\n                        queryClient.invalidateQueries(queryKey.list());\r\n                        break;\r\n                    case \"many\":\r\n                        queryClient.invalidateQueries(queryKey.many());\r\n                        break;\r\n                    case \"resourceAll\":\r\n                        queryClient.invalidateQueries(queryKey.resourceAll);\r\n                        break;\r\n                    case \"detail\":\r\n                        queryClient.invalidateQueries(\r\n                            queryKey.detail(id || \"\"),\r\n                        );\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n        },\r\n        [],\r\n    );\r\n\r\n    return invalidate;\r\n};","import { useContext } from \"react\";\r\n\r\nimport { SmeltContext } from \"../../contexts/smelt\";\r\nimport { ISmeltContext } from \"../../interfaces\";\r\n\r\ntype UseMutationModeType = () => {\r\n    mutationMode: ISmeltContext[\"mutationMode\"];\r\n    undoableTimeout: ISmeltContext[\"undoableTimeout\"];\r\n};\r\n\r\nexport const useMutationMode: UseMutationModeType = () => {\r\n    const { mutationMode, undoableTimeout } = useContext(SmeltContext);\r\n\r\n    return { mutationMode, undoableTimeout };\r\n};","import React from \"react\";\r\n\r\nimport { ISmeltContext, ISmeltContextProvider } from \"./ISmeltContext\";\r\n\r\nexport const SmeltContext = React.createContext<ISmeltContext>({\r\n  mutationMode: \"pessimistic\",\r\n  warnWhenUnsavedChanges: false,\r\n  syncWithLocation: false,\r\n  undoableTimeout: 5000,\r\n});\r\n\r\nexport const SmeltContextProvider: React.FC<ISmeltContextProvider> = ({\r\n  mutationMode,\r\n  warnWhenUnsavedChanges,\r\n  syncWithLocation,\r\n  undoableTimeout,\r\n  children,\r\n}) => {\r\n  return (\r\n    <SmeltContext.Provider\r\n      value={{\r\n        mutationMode,\r\n        warnWhenUnsavedChanges,\r\n        syncWithLocation,\r\n        undoableTimeout,\r\n      }}\r\n    >\r\n      {children}\r\n    </SmeltContext.Provider>\r\n  );\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { AuthContext } from \"../../../contexts/auth\";\r\nimport { IAuthContext } from \"../../../interfaces\";\r\nimport { useQuery, UseQueryResult, UseQueryOptions } from \"react-query\";\r\n\r\nexport const usePermissions = <TData = any>(\r\n    options?: UseQueryOptions<TData>,\r\n): UseQueryResult<TData, unknown> => {\r\n    const { getPermissions } = useContext<IAuthContext>(AuthContext);\r\n\r\n    const queryResponse = useQuery<TData>(\r\n        \"usePermissions\",\r\n        getPermissions,\r\n        options,\r\n    );\r\n\r\n    return queryResponse;\r\n};","import React from \"react\";\r\n\r\nimport { AuthContext } from \"../../../contexts/auth\";\r\nimport { IAuthContext } from \"../../../interfaces\";\r\nimport { useQuery, UseQueryResult } from \"react-query\";\r\n\r\n\r\nexport const useGetIdentity = <TData = any>(): UseQueryResult<\r\n    TData,\r\n    unknown\r\n> => {\r\n    const { getUserIdentity } = React.useContext<IAuthContext>(AuthContext);\r\n\r\n    const queryResponse = useQuery<TData>(\"getUserIdentity\", getUserIdentity!, {\r\n        enabled: !!getUserIdentity,\r\n    });\r\n\r\n    return queryResponse;\r\n};","import React from \"react\";\r\nimport { useMutation, UseMutationResult } from \"react-query\";\r\n\r\nimport { AuthContext } from \"../../../contexts/auth\";\r\nimport { IAuthContext, TLogoutData } from \"../../../interfaces\";\r\n\r\n\r\nexport const useLogout = <TVariables = void>(): UseMutationResult<\r\n    TLogoutData,\r\n    Error,\r\n    TVariables,\r\n    unknown\r\n> => {\r\n    const { logout: logoutFromContext } =\r\n        React.useContext<IAuthContext>(AuthContext);\r\n\r\n    const queryResponse = useMutation<TLogoutData, Error, TVariables, unknown>(\r\n        \"useLogout\",\r\n        logoutFromContext,\r\n        {\r\n            onSuccess: () => {\r\n               \r\n            },\r\n            onError: (error: Error) => {\r\n               console.log(error)\r\n            },\r\n        },\r\n    );\r\n\r\n    return queryResponse;\r\n};","import React from \"react\";\r\nimport { useMutation, UseMutationResult } from \"react-query\";\r\n\r\nimport { AuthContext } from \"../../../contexts/auth\";\r\n\r\nimport { IAuthContext, TLoginData } from \"../../../interfaces\";\r\n\r\n\r\nexport const useLogin = <TVariables = {}>(): UseMutationResult<\r\n    TLoginData,\r\n    Error,\r\n    TVariables,\r\n    unknown\r\n> => {\r\n    const { login: loginFromContext } =\r\n        React.useContext<IAuthContext>(AuthContext);\r\n\r\n    const queryResponse = useMutation<TLoginData, Error, TVariables, unknown>(\r\n        \"useLogin\",\r\n        loginFromContext,\r\n        {\r\n            onSuccess: (redirectPathFromAuth) => {\r\n               \r\n            },\r\n            onError: (error: any) => {\r\n               \r\n            },\r\n        },\r\n    );\r\n\r\n    return queryResponse;\r\n};","import { useContext } from \"react\";\r\nimport { useQuery, UseQueryResult } from \"react-query\";\r\n\r\nimport { AuthContext } from \"../../../contexts/auth\";\r\nimport { IAuthContext } from \"../../../interfaces\";\r\n\r\nexport const useAuthenticated = (\r\n    params?: any,\r\n): UseQueryResult<any, unknown> => {\r\n    const { checkAuth } = useContext<IAuthContext>(AuthContext);\r\n\r\n    const queryResponse = useQuery(\r\n        [\"useAuthenticated\", params],\r\n        () => checkAuth(params),\r\n        {\r\n            retry: false,\r\n        },\r\n    );\r\n\r\n    return queryResponse;\r\n};","import { useContext } from \"react\";\r\n\r\nimport { AuthContext } from \"../../../contexts/auth\";\r\nimport { IAuthContext } from \"../../../interfaces\";\r\n\r\nexport const useIsAuthenticated = () => {\r\n    const { isAuthenticated } = useContext<IAuthContext>(AuthContext);\r\n\r\n    return isAuthenticated;\r\n};","import { useContext } from \"react\";\r\nimport { AuthContext } from \"../../contexts/auth\";\r\nimport { IAuthContext } from \"../../interfaces\";\r\n\r\n/**\r\n * A hook that the UI uses\r\n * @internal\r\n */\r\nexport const useIsExistAuthentication = (): boolean => {\r\n    const { isProvided } = useContext<IAuthContext>(AuthContext);\r\n\r\n    return isProvided || false;\r\n};"],"mappings":"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","names":[]}